The UTXO system is like a digital recreation of a cash economy. For example, Alice gives Bob 1 BTC , and the system now recognizes that there is 1 BTC signed to Bob that he has not yet given to anyone else. If Bob already had 1 BTC, then his balance on the blockchain would be 1 BTC + 1 BTC. Bob’s Bitcoin balance is the sum of all Bitcoin signed to him, similar to how all the fiat cash in Bob’s leather wallet is the sum of all fiat cash given to him. If he wants to combine his two separate BTC, he must do so in another transaction, much like he needs to do if combining two $5 bills into a $10 bill.

In contrast, the account model is like a bank account that automatically maintains user balances, similar to how a bank maintains a single balance amidst spending and receiving funds. When Alice gives Bob 1 ETH, the system now recognizes that Bob’s balance has gone up by 1 ETH and Alice’s has gone down. If Bob already had 1 ETH, then his balance on the blockchain would be 2 ETH. He does not need another exchange to combine them in his account.


What Do Bitcoin Nodes Check Before Verifying a Transaction?

1. They check to see if the data structure and the syntax of the transaction are correct.

2. They check to see if the transaction is above 1 MB.

3. They confirm that the outputs and inputs have values are not be more than 21 million or less than 0.

4. They check the locktime to confirm that it is less than the number allowed.

5. They confirm that the unlocking scripts for the inputs are verified against that of the output.

6. They check to see if the transaction size is more than or up to 100 bytes.

7. They reject any transaction when the value is too low for an empty block.

8. They reject the transactions if the input value is not as high as the output value.

9. They confirm that the input value falls within the required range.

10. They make sure that all Coinbase transactions have a maturity of at least 100 confirmations.

11. The output for each input must exit. If it has been spent, the transaction will be rejected.

12. They confirm that the locking script and the standard format match.

13. They confirm that a matching script exists.

14. The Bitcoin nodes make sure that the signatures are not above the signature limit.

15. They verify that the script for unlocking can push numbers onto the stack.

16. They throw any transaction that is missing into the orphan transaction pool.

Types of blockchain:

Public blockchains: a public blockchain is a blockchain that anyone in the world can read, anyone in the world can send transactions to and expect to see them included if they are valid, and anyone in the world can participate in the consensus process - the process for determining what blocks get added to the chain and what the current state is. As a substitute for centralized or quasi-centralized trust, public blockchains are secured by cryptoeconomics - the combination of economic incentives and cryptographic verification using mechanisms such as proof of work or proof of stake, following a general principle that the degree to which someone can have an influence in the consensus process is proportional to the quantity of economic resources that they can bring to bear. These blockchains are generally considered to be "fully decentralized".
Consortium blockchains: a consortium blockchain is a blockchain where the consensus process is controlled by a pre-selected set of nodes; for example, one might imagine a consortium of 15 financial institutions, each of which operates a node and of which 10 must sign every block in order for the block to be valid. The right to read the blockchain may be public, or restricted to the participants, and there are also hybrid routes such as the root hashes of the blocks being public together with an API that allows members of the public to make a limited number of queries and get back cryptographic proofs of some parts of the blockchain state. These blockchains may be considered "partially decentralized".
Fully private blockchains: a fully private blockchain is a blockchain where write permissions are kept centralized to one organization. Read permissions may be public or restricted to an arbitrary extent. Likely applications include database management, auditing, etc internal to a single company, and so public readability may not be necessary in many cases at all, though in other cases public auditability is desired.
